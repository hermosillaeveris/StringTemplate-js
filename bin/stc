#!/usr/bin/env node

"use strict";

var fs = require("fs"),
    path = require("path"),
    stc = require("../compiler/stc"),
    stGroup = require("../lib/stGroup");

//
// Command line parsing
//
// Keep these defaults in sync with default options in stc.js
var argv = require('yargs')
    .require(1, "Missing required input-path argument")
    .option("ast", {
        alias: "a",
        default: false,
        type: "boolean",
        describe: "Output AST."
    })
    .option("encoding", {
        alias: "e",
        default: "utf8",
        type: "string",
        describe: "File encoding."
    })
    .option("delimiters", {
        alias: "s",
        default: stGroup.DEFAULT_START_DELIMITER + stGroup.DEFAULT_STOP_DELIMITER,
        type: "string",
        describe: "Start and stop characters that delimit template expressions."
    })
    .option("output", {
        alias: "o",
        type: "string",
        default: "",
        describe: "Output file name."
    })
    .option("minify", {
        alias: "m",
        default: false,
        type: "boolean",
        describe: "Minify output TODO."
    })
    .option("raw", {
        alias: "r",
        default: false,
        type: "boolean",
        describe: "Template files with no declarations (raw)."
    })
    .option("v", {
        alias: "verbose",
        default: false,
        type: "boolean",
        describe: "Log output about what the compiler is doing"
    })
    .usage("Usage: $0 [options] input-path")
    .wrap(78)
    .version(stc.version, "version")
    .strict()
    .help("help", "Display usage")
    .alias("help", "h")
    .check(function(args) {
        if (args.delimiters.length !== 2) {
            throw "Error: delimiters option must be exactly two characters.";
        }
        return true;
    })
    .argv;

// xxx option to also compile imports? or take list of inputs?

var ext, stat, options, startTime,
    inputPath = argv._[0];

if (argv.verbose) {
    console.log("StringTemplate compiler version " + stc.version);
}

try {
    stat = fs.statSync(inputPath);
} catch (ex) {
    if (ex.code === "ENOENT") {
        console.log("Error: No such file or directory '" + inputPath + "'.");
    } else if (ex.code === "EACCES") {
        console.log("Error: Permission denied to access '" + inputPath + "'.");
    } else {
        console.log(ex.message);
    }
    process.exit(1);
}

// xxx pass in options object and callback or get a promise back?
// xxx output time perhaps
options = {
    encoding: argv.encoding,
    verbose: argv.verbose,
    outputAST: argv.ast,
    minify: argv.minify,
    delimiterStartChar: argv.delimiters.charAt(0),
    delimiterStopChar: argv.delimiters.charAt(1)
};

function callback(err) {
    if (err) {
        console.log(err.message);
        process.exit(1);
    }
    console.log("Completed in " + (Math.round((Date.now() - startTime) / 10) / 100) + " seconds.");
    process.exit(0);
}

startTime = Date.now();

if (stat.isDirectory()) {
    if (argv.raw) {
        stc.compileRawGroupDir(inputPath, options, callback);
    } else {
        stc.compileGroupDir(inputPath, options, callback);
    }
} else {
    if (argv.raw) {
        console.log("Warning: raw option ignored when compiling a single file."); // xxx why would that be?
    }
    ext = path.extname(inputPath);
    if (ext === stGroup.GROUP_FILE_EXTENSION) {
        stc.compileGroupFile(inputPath, options, callback);
    } else if (ext === stGroup.TEMPLATE_FILE_EXTENSION) {
        // xxx 
        stc.compileGroupFile(inputPath, options, callback);
    }
}
