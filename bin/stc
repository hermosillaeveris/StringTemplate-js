#!/usr/bin/env node
/*
 [The "BSD licence"]
 Copyright (c) 2015, John Snyders
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
 notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
 notice, this list of conditions and the following disclaimer in the
 documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * stc
 * Commandline interface to the StringTemplate compiler
 */
"use strict";

var fs = require("fs"),
    path = require("path"),
    stc = require("../compiler/stc"),
    group = require("../compiler/group");

//
// Command line parsing
//
// Keep these defaults in sync with default options in stc.js
var argv = require('yargs')
    .require(1, "Missing required input-path argument")
    .option("ast", {
        alias: "a",
        default: false,
        type: "boolean",
        describe: "Output AST."
    })
    .option("encoding", {
        alias: "e",
        default: "utf8",
        type: "string",
        describe: "File encoding."
    })
    .option("delimiters", {
        alias: "s",
        default: group.DEFAULT_START_DELIMITER + group.DEFAULT_STOP_DELIMITER,
        type: "string",
        describe: "Start and stop characters that delimit template expressions."
    })
    .option("output", {
        alias: "o",
        type: "string",
        default: "",
        describe: "Output file name."
    })
    .option("minify", {
        alias: "m",
        default: false,
        type: "boolean",
        describe: "Minify output TODO."
    })
    .option("raw", {
        alias: "r",
        default: false,
        type: "boolean",
        describe: "Template files with no declarations (raw)."
    })
    .option("v", {
        alias: "verbose",
        default: false,
        type: "boolean",
        describe: "Log output about what the compiler is doing"
    })
    .usage("Usage: $0 [options] input-path")
    .wrap(78)
    .version(stc.version, "version")
    .strict()
    .help("help", "Display usage")
    .alias("help", "h")
    .check(function(args) {
        if (args.delimiters.length !== 2) {
            throw "Error: delimiters option must be exactly two characters.";
        }
        return true;
    })
    .argv;

// xxx option to include a copyright string in generated file
// xxx option to generate source map
// xxx option to control how to access group prototype node export, AMD, browser global etc.
// xxx option to also compile imports? or take list of inputs?

var ext, stat, options, startTime,
    inputPath = argv._[0];

if (argv.verbose) {
    console.log("StringTemplate compiler version " + stc.version);
}

try {
    stat = fs.statSync(inputPath);
} catch (ex) {
    if (ex.code === "ENOENT") {
        console.log("Error: No such file or directory '" + inputPath + "'.");
    } else if (ex.code === "EACCES") {
        console.log("Error: Permission denied to access '" + inputPath + "'.");
    } else {
        console.log(ex.message);
    }
    process.exit(1);
}

options = {
    encoding: argv.encoding,
    verbose: argv.verbose,
    outputAST: argv.ast,
    output: argv.output,
    minify: argv.minify,
    delimiterStartChar: argv.delimiters.charAt(0),
    delimiterStopChar: argv.delimiters.charAt(1)
};

function callback(err) {
    if (err) {
        console.log(err.message);
        process.exit(1);
    }
    console.log("Completed in " + (Math.round((Date.now() - startTime) / 10) / 100) + " seconds.");
    process.exit(0);
}

startTime = Date.now();

if (stat.isDirectory()) {
    if (argv.raw) {
        stc.compileRawGroupDir(inputPath, options, callback);
    } else {
        stc.compileGroupDir(inputPath, options, callback);
    }
} else {
    if (argv.raw) {
        console.log("Warning: Raw option ignored when compiling a single file."); // xxx why would that be?
    }
    ext = path.extname(inputPath);
    if (ext === group.GROUP_FILE_EXTENSION) {
        stc.compileGroupFile(inputPath, options, callback);
    } else if (ext === group.TEMPLATE_FILE_EXTENSION) {
        // xxx 
        stc.compileGroupFile(inputPath, options, callback);
    } else {
        console.log("Error: Unrecognized file extension '" + inputPath + "'.");
    }
}
