#!/usr/bin/env node
/*
 [The "BSD licence"]
 Copyright (c) 2015, John Snyders
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
 notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
 notice, this list of conditions and the following disclaimer in the
 documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// xxx consider rename this to st

"use strict";

var fs = require("fs"),
    path = require("path"),
    stc = require("../compiler/stc.js"),
    cGroup = require("../compiler/group.js"),
    st = require("../lib/stRuntime"),
    w = require("../lib/autoIndentWriter");

function fileExists(file) {
    var stat;
    try {
        stat = fs.statSync(file);
    } catch (ex) {
        return false;
    }
    return stat.isFile();
}

function processTemplate(group, template, options, data) {
    var t, g, p, v, writer, compiledGroup;

    compiledGroup = require(group);
    g = st.loadGroup(compiledGroup);
    writer = w.makeWriter();

    t = g.getTemplate(template);
    for (p in data) {
        if (data.hasOwnProperty(p)) {
            t.add(p, data[p]);
        }
    }

    t.write(writer);

    // xxx write to file or stdout
    if (options.verbose /*xxx and going to stdout*/) {
        console.log("Template output:");
    }
    // don't use console.log because it adds an extra new line at the end.
    process.stdout.write(writer.toString());
}


function compile(inputPath, xxx) {
    var stat, ext;
    try {
        stat = fs.statSync(inputPath);
    } catch (ex) {
        if (ex.code === "ENOENT") {
            console.log("Error: No such file or directory '" + inputPath + "'.");
        } else if (ex.code === "EACCES") {
            console.log("Error: Permission denied to access '" + inputPath + "'.");
        } else {
            console.log(ex.message);
        }
        process.exit(1);
    }

    // xxx pass in options object and callback or get a promise back?
    // xxx output time perhaps
    options = {
        encoding: argv.encoding,
        verbose: argv.verbose,
        outputAST: argv.ast,
        minify: argv.minify,
        delimiterStartChar: argv.delimiters.charAt(0),
        delimiterStopChar: argv.delimiters.charAt(1)
    };

    function callback(err) {
        if (err) {
            console.log(err.message);
            process.exit(1);
        }
        console.log("Completed in " + (Math.round((Date.now() - startTime) / 10) / 100) + " seconds.");
        process.exit(0);
    }

    startTime = Date.now();

    if (stat.isDirectory()) {
        if (argv.raw) {
            stc.compileRawGroupDir(inputPath, options, callback);
        } else {
            stc.compileGroupDir(inputPath, options, callback);
        }
    } else {
        if (argv.raw) {
            console.log("Warning: raw option ignored when compiling a single file."); // xxx why would that be?
        }
        ext = path.extname(inputPath);
        if (ext === cGroup.GROUP_FILE_EXTENSION) {
            stc.compileGroupFile(inputPath, options, callback);
        } else if (ext === cGroup.TEMPLATE_FILE_EXTENSION) {
            // xxx 
            stc.compileGroupFile(inputPath, options, callback);
        }
    }
}


//
// Command line parsing
//
var argv = require('yargs')
    .require(1, "Missing required [group.]template argument")
    .option("encoding", {
        alias: "e",
        default: "utf8",
        type: "string",
        describe: "File encoding."
    })
    .option("templates", {
        alias: "t",
        type: "string",
        default: "",
        describe: "Template directory where .stg or .st files are found. Default is current working directory."
    })
    .option("output", {
        alias: "o",
        type: "string",
        default: "",
        describe: "Output file. Default is to use stdout"
    })
    .option("noindent", {
        alias: "n",
        default: false,
        type: "boolean",
        describe: "Don't auto indent the output"
    })
    .option("delimiters", {
        alias: "s",
        default: cGroup.DEFAULT_START_DELIMITER + cGroup.DEFAULT_STOP_DELIMITER,
        type: "string",
        describe: "Start and stop characters that delimit template expressions. Only needed if compiling."
    })
    .option("raw", {
        alias: "r",
        default: false,
        type: "boolean",
        describe: "Template files with no declarations (raw). Only needed if compiling."
    })
    .option("v", {
        alias: "verbose",
        default: false,
        type: "boolean",
        describe: "Log output about runtime processing of the template"
    })
    .usage("Usage: $0 [options] [<group>.]<template> <data-file>")
    .wrap(78)
    .version(stc.version, "version")
    .strict()
    .help("help", "Display usage")
    .alias("help", "h")
    .check(function(args) {
        if (args.delimiters.length !== 2) {
            throw "Error: delimiters option must be exactly two characters.";
        }
        return true;
    })
    .argv;

    // xxx option(s) to ignore various runtime errors or other control over where errors go

if (argv.verbose) {
    // xxx version stc vs stst vs runtime vs compiler All one version?
    console.log("StringTemplate version " + stc.version);
}

var i, startTime, baseDir, groupFile, groupName, template, data, buf,
    arg1 = argv._[0],
    options = {
        noIndent: argv.noindent,
        output: argv.output,
        verbose: argv.verbose
        // xxx encoding?
    };

// figure out where to look for compiled groups
baseDir = argv.templates;
if (!path.isAbsolute(baseDir)) {
    baseDir = path.join(process.cwd(), baseDir);
}
if (argv.verbose) {
    console.log("Base Directory: " + baseDir);
}

// read data
// xxx
if (!argv._[1]) {
    console.log("xxx need to read from stdin");
} else {
    data = fs.readFileSync(argv._[1], {
        encoding: argv.encoding
    });
}
data = JSON.parse(data);

i = arg1.lastIndexOf(".");
if (i >= 0) {
    template = arg1.substring(i + 1);
    groupName = arg1.substring(0, i);
} else {
    template = arg1;
    groupName = path.basename(baseDir);
}

if (argv.verbose) {
    console.log("Group name: " + groupName + ", Template: " + template);
}

// look for compiled group file
groupFile = path.join(baseDir, groupName + "_stg.js");
if (fileExists(groupFile)) {
    if (argv.verbose) {
        console.log("Found compiled group file " + path.basename(groupFile));
    }
    processTemplate(groupFile, template, options, data);
} else {
    // look for group file
    groupFile = path.join(baseDir, groupName + ".stg");
    if (fileExists(groupFile)) {
        if (argv.verbose) {
            console.log("Found group file " + path.basename(groupFile));
        }
        console.log("xxx todo compile");
    } else {
        // try to compile baseDir as a group directory
        console.log("xxx todo compile group directory");
    }
}
